#  -*- mode: org -*-

* 存疑部分
** QUESTION UF_Break的问题
   UF_Break理应只把自己这一项分离开来,而留下子树不改变(依然属于原先的集合),但
   之前的算法中一直是连同子树一起被分离了. 修改之后也无改进,也无异常,似乎改不
   改都没有影响.

** QUESTION 三维图像压缩的问题
   目前图像压缩只能保证得出的色块是正确的, 无法保证最终求得的``中心点''也是正
   确的. 即压缩后的图像颜色失真. 

* TODO-list
** TODO [#C] 保存每次迭代的信息
   包括每条人工鱼选择的运动方式及运动过程, 以及每步迭代产生的图像信息

** TODO [#B] 使用KD树改良follow中查找临近最大值点的部分
** 步长相关的一些改进
*** TODO [#B] 提供随机步长的功能 				    :featrue:
    目前随机步长还不太适用于聚类问题

*** TODO [#A] 设置每个维度的步长值
    维度间的步长值不一定是相等的

** TODO [#B]UF_Break的问题
   UF_Break理应只把自己这一项分离开来,而留下子树不改变(依然属于原先的集合),但
   之前的算法中一直是连同子树一起被分离了. 修改之后也无改进,也无异常,似乎改不
   改都没有影响.这个存疑.
   Entered on [2012-11-15 Thu 22:23]

** TODO 应用优先队列处理鱼群的计算				       :feature:
    Food值和运动次数是两个部分，用于比较优先级

** TODO [#A]prey的时候应该尽量避免方向的重复
    比如一次往(1,1),一次往(-1,-1)    

** TODO 改变plotClass里的代码
   Entered on [2012-11-15 Thu 00:31]
   目前的代码所做的工作是找平均值作为center, 或者在聚类中用做大值作为center
   但就实际情况来看, 都不适合图像压缩的情况. 因为多维度上, 虽然聚类被找到基本
   没问题, 但是不代表找到的最大值点一定就和实际的颜色色块相近, 比如色块是黑色,
   但找到的点可能是(255, 255, 100), 如此则相距甚远, 但确实程序没有大问题.
   
   解决方法:
   在plotClass中用别的方法代替现有找center的方法, 使得可以尽可能的表现出"众数"
   的概念

** TODO 步长、视域等数据的规定
    这些值最好和问题本身相关，如视域可能和定义域相关

** TODO [#A] 用插值代替原先的getFood函数
   预处理时先等距取点, 之后根据这些点值做插值计算
** [#B] 尝试各类应用领域
*** DONE [#A] 函数极值
*** TODO 聚类
*** TODO 图像压缩
* 工作记录
** DONE 代码注释工作完成
   完成了主要部分的代码注释, 并适当修改了一些程序, 修复了几个bug
   Finished on [2012-11-23]
   Done by LaySent

** DONE 代码结构重新组织基本完成
   完成了主要部分的代码重新足够, 增加了函数指针的功能, 将af作为一个函数, 并由
   更上级的函数来调用. 以上工作方便了多种算法应用情况可以同时存在在文件中, 方
   便调用调试
   Finished on [2012-11-25]
   Done by the reAsOn & LaySent
** TODO 聚类情况中的算法收敛判断
   目前想到可行的两种方式:
   1. 当类的数量大体不变时结束
   2. 当类的最大值大体不变时结束
* org-mode相关设置
#+STARUP: overview
#+STARUP: hidestars
#+TODO: TODO STARTING QUESTION | SOLVED DONE
#+TAGS: {@feature @bug}
  
